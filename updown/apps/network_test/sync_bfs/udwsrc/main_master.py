from linker.EFAProgram import efaProgram

## Global constants

@efaProgram
def EFA_main_master(efa):
  efa.code_level = 'machine'
  state0 = efa.State("udweave_init") #Only one state code 
  efa.add_initId(state0.state_id)
  ## Static declarations
  ## Scoped Variable "num_map_done" uses Register X16, scope (0)
  ## Scoped Variable "iteration" uses Register X17, scope (0)
  ## Scoped Variable "num_lanes" uses Register X18, scope (0)
  ## Scoped Variable "num_map" uses Register X19, scope (0)
  ## Scoped Variable "return_value" uses Register X20, scope (0)
  ## Scoped Variable "return_value2" uses Register X21, scope (0)
  ## Scoped Variable "num_lanes_per_control" uses Register X22, scope (0)
  ## Scoped Variable "control_level" uses Register X23, scope (0)
  ## Param "_num_lanes" uses Register X8, scope (0->16)
  ## Param "_gv" uses Register X9, scope (0->16)
  ## Param "_queue_start" uses Register X10, scope (0->16)
  ## Param "_queue_length" uses Register X11, scope (0->16)
  ## Param "_itera" uses Register X12, scope (0->16)
  ## Param "_total_lanes" uses Register X13, scope (0->16)
  ## Param "log2_num_control_lane" uses Register X14, scope (0->16)
  ## Param "_control_level" uses Register X15, scope (0->16)
  ## Scoped Variable "lmbuff" uses Register X24, scope (0->16)
  ## Scoped Variable "num_masters" uses Register X25, scope (0->16)
  ## Scoped Variable "size" uses Register X26, scope (0->16)
  ## Scoped Variable "index" uses Register X27, scope (0->16)
  ## Scoped Variable "addr_start" uses Register X27, scope (0->16->20)
  ## Scoped Variable "netid" uses Register X28, scope (0->16->20)
  ## Scoped Variable "lane_end" uses Register X29, scope (0->16->20)
  ## Scoped Variable "evword" uses Register X30, scope (0->16->20->22)
  ## Scoped Variable "addr_start" uses Register X27, scope (0->16->23)
  ## Scoped Variable "mlane_id" uses Register X28, scope (0->16->23)
  ## Scoped Variable "lane_end" uses Register X29, scope (0->16->23)
  ## Scoped Variable "evword" uses Register X30, scope (0->16->23->25)
  ## Param "nwid" uses Register X8, scope (0->28)
  ## Scoped Variable "evword" uses Register X24, scope (0->28->30->32)
  ## Scoped Variable "lmbuff" uses Register X24, scope (0->28->30->33)
  ## Scoped Variable "index" uses Register X25, scope (0->28->30->33)
  ## Scoped Variable "cont" uses Register X26, scope (0->28->30->33)
  ## Param "op0" uses Register X8, scope (0->34)
  ## Param "op1" uses Register X9, scope (0->34)
  ## Param "_control_level" uses Register X10, scope (0->34)
  ## Scoped Variable "lmbuff" uses Register X24, scope (0->34)
  ## Scoped Variable "index" uses Register X25, scope (0->34)
  ## Scoped Variable "tid" uses Register X26, scope (0->34)
  ## Scoped Variable "evword" uses Register X27, scope (0->34)
  ## Param "itera" uses Register X8, scope (0->35)
  ## Scoped Variable "evword" uses Register X24, scope (0->35->37)
  ## Scoped Variable "net_id" uses Register X25, scope (0->35->37)
  ## Scoped Variable "net_id_end" uses Register X26, scope (0->35->37)
  ## Scoped Variable "cont_evword" uses Register X27, scope (0->35->37->39)
  ## Scoped Variable "next_evword" uses Register X28, scope (0->35->37->39)
  ## Scoped Variable "evword" uses Register X24, scope (0->35->40)
  ## Scoped Variable "net_id" uses Register X25, scope (0->35->40)
  ## Scoped Variable "net_id_end" uses Register X26, scope (0->35->40)
  ## Scoped Variable "cont_evword" uses Register X27, scope (0->35->40->42)
  ## Scoped Variable "next_evword" uses Register X28, scope (0->35->40->42)
  ## Param "nv" uses Register X8, scope (0->43)
  ## Param "nwid" uses Register X9, scope (0->43)
  ## Scoped Variable "evword" uses Register X24, scope (0->43->45->47)
  ## Scoped Variable "lmbuff" uses Register X24, scope (0->43->45->48)
  ## Scoped Variable "index" uses Register X25, scope (0->43->45->48)
  ## Scoped Variable "cont" uses Register X26, scope (0->43->45->48)
  ## Scoped Variable "evword" uses Register X24, scope (0->49->51)
  ## Scoped Variable "net_id" uses Register X25, scope (0->49->51)
  ## Scoped Variable "net_id_end" uses Register X26, scope (0->49->51)
  ## Scoped Variable "cont_evword" uses Register X27, scope (0->49->51->53)
  ## Scoped Variable "next_evword" uses Register X28, scope (0->49->51->53)
  ## Scoped Variable "evword" uses Register X24, scope (0->49->54)
  ## Scoped Variable "net_id" uses Register X25, scope (0->49->54)
  ## Scoped Variable "net_id_end" uses Register X26, scope (0->49->54)
  ## Scoped Variable "cont_evword" uses Register X27, scope (0->49->54->56)
  ## Scoped Variable "next_evword" uses Register X28, scope (0->49->54->56)
  ## Param "nv" uses Register X8, scope (0->57)
  ## Scoped Variable "evword" uses Register X24, scope (0->57->59->61)
  ## Scoped Variable "lmbuff" uses Register X24, scope (0->57->59->62)
  ## Scoped Variable "index" uses Register X25, scope (0->57->59->62)
  ## Scoped Variable "cont" uses Register X26, scope (0->57->59->62)
  ## Scoped Variable "evword" uses Register X24, scope (0->63->65)
  ## Scoped Variable "net_id" uses Register X25, scope (0->63->65)
  ## Scoped Variable "net_id_end" uses Register X26, scope (0->63->65)
  ## Scoped Variable "cont_evword" uses Register X27, scope (0->63->65->67)
  ## Scoped Variable "next_evword" uses Register X28, scope (0->63->65->67)
  ## Scoped Variable "evword" uses Register X24, scope (0->63->68)
  ## Scoped Variable "net_id" uses Register X25, scope (0->63->68)
  ## Scoped Variable "net_id_end" uses Register X26, scope (0->63->68)
  ## Scoped Variable "cont_evword" uses Register X27, scope (0->63->68->70)
  ## Scoped Variable "next_evword" uses Register X28, scope (0->63->68->70)
  ## Param "_reduce_queue_length" uses Register X8, scope (0->71)
  ## Param "edges" uses Register X9, scope (0->71)
  ## Scoped Variable "lmbuff" uses Register X24, scope (0->71)
  ## Scoped Variable "lmbuff_tmp" uses Register X26, scope (0->71->73->75->78)
  ## Scoped Variable "evword" uses Register X27, scope (0->71->73->75->78)
  ## Scoped Variable "index" uses Register X25, scope (0->71->73->79)
  ## Scoped Variable "cont" uses Register X26, scope (0->71->73->79)
  ## #define DEBUG
  ## This is all metadata information
  ## Total threads used in BFS
  ## #define NUM_THREADS 245
  ## #define NUM_LANES_PER_MASTER 2048
  ## Each threads in the same lane shared the following scratchpad
  ## send buffer 1 - 17 (16 words)
  ## #define DEBUG
  
  #################################################
  ###### Writing code for thread main_master ######
  #################################################
  # Writing code for event main_master::init
  tranmain_master__init = efa.writeEvent('main_master::init')
  tranmain_master__init.writeAction(f"entry: addi X7 X24 0") 
  tranmain_master__init.writeAction(f"bneiu X15 0 __if_init_2_post") 
  tranmain_master__init.writeAction(f"__if_init_0_true: print 'BFS Start'") 
  tranmain_master__init.writeAction(f"movir X26 0") 
  tranmain_master__init.writeAction(f"movrl X26 0(X24) 0 8") 
  tranmain_master__init.writeAction(f"__if_init_2_post: addi X8 X18 0") 
  tranmain_master__init.writeAction(f"movir X26 1") 
  tranmain_master__init.writeAction(f"sl X26 X14 X25") 
  tranmain_master__init.writeAction(f"subi X8 X22 1") 
  tranmain_master__init.writeAction(f"sr X22 X14 X26") 
  tranmain_master__init.writeAction(f"addi X26 X22 1") 
  tranmain_master__init.writeAction(f"sladdii X11 X28 1 2") 
  tranmain_master__init.writeAction(f"mul X28 X22 X29") 
  tranmain_master__init.writeAction(f"sli X29 X26 3") 
  tranmain_master__init.writeAction(f"bneiu X22 1 __if_init_4_false") 
  tranmain_master__init.writeAction(f"__if_init_3_true: addi X8 X19 0") 
  ## start init 
  tranmain_master__init.writeAction(f"addi X7 X24 8") 
  tranmain_master__init.writeAction(f"movrl X9 0(X24) 0 8") 
  tranmain_master__init.writeAction(f"movrl X12 24(X24) 0 8") 
  tranmain_master__init.writeAction(f"movrl X13 32(X24) 0 8") 
  tranmain_master__init.writeAction(f"addi X10 X27 0") 
  tranmain_master__init.writeAction(f"addi X0 X28 0") 
  tranmain_master__init.writeAction(f"addi X8 X30 0")  # This is for casting. May be used later on
  tranmain_master__init.writeAction(f"add X28 X30 X29") 
  tranmain_master__init.writeAction(f"__while_init_6_condition: ble X29 X28 __while_init_8_post") 
  tranmain_master__init.writeAction(f"__while_init_7_body: movrl X27 8(X24) 0 8") 
  tranmain_master__init.writeAction(f"movrl X11 16(X24) 0 8") 
  tranmain_master__init.writeAction(f"movir X30 0") 
  tranmain_master__init.writeAction(f"evlb X30 map_master__init") 
  tranmain_master__init.writeAction(f"evi X30 X30 255 4") 
  tranmain_master__init.writeAction(f"ev X30 X30 X28 X28 8") 
  tranmain_master__init.writeAction(f"send_wret X30 main_master::init_done X24 5 X31") 
  tranmain_master__init.writeAction(f"add X27 X26 X27") 
  tranmain_master__init.writeAction(f"addi X28 X28 1") 
  tranmain_master__init.writeAction(f"jmp __while_init_6_condition") 
  tranmain_master__init.writeAction(f"__while_init_8_post: jmp __if_init_5_post") 
  tranmain_master__init.writeAction(f"__if_init_4_false: addi X7 X24 8") 
  tranmain_master__init.writeAction(f"movrl X22 0(X24) 0 8") 
  tranmain_master__init.writeAction(f"movrl X9 8(X24) 0 8") 
  tranmain_master__init.writeAction(f"movrl X11 24(X24) 0 8") 
  tranmain_master__init.writeAction(f"movrl X12 32(X24) 0 8") 
  tranmain_master__init.writeAction(f"movrl X13 40(X24) 0 8") 
  tranmain_master__init.writeAction(f"movrl X14 48(X24) 0 8") 
  tranmain_master__init.writeAction(f"addi X15 X28 1") 
  tranmain_master__init.writeAction(f"movrl X28 56(X24) 0 8") 
  tranmain_master__init.writeAction(f"addi X10 X27 0") 
  tranmain_master__init.writeAction(f"addi X0 X28 0")  # This is for casting. May be used later on
  tranmain_master__init.writeAction(f"addi X25 X19 0") 
  tranmain_master__init.writeAction(f"mul X22 X25 X29") 
  tranmain_master__init.writeAction(f"add X29 X28 X29") 
  tranmain_master__init.writeAction(f"__while_init_9_condition: ble X29 X28 __if_init_5_post") 
  tranmain_master__init.writeAction(f"__while_init_10_body: movrl X27 16(X24) 0 8") 
  tranmain_master__init.writeAction(f"movir X30 0") 
  tranmain_master__init.writeAction(f"evlb X30 main_master::init") 
  tranmain_master__init.writeAction(f"evi X30 X30 255 4") 
  tranmain_master__init.writeAction(f"ev X30 X30 X28 X28 8") 
  tranmain_master__init.writeAction(f"send_wret X30 main_master::init_done X24 8 X31") 
  tranmain_master__init.writeAction(f"add X28 X22 X28") 
  tranmain_master__init.writeAction(f"add X27 X26 X27") 
  tranmain_master__init.writeAction(f"jmp __while_init_9_condition") 
  tranmain_master__init.writeAction(f"__if_init_5_post: movir X16 0") 
  tranmain_master__init.writeAction(f"addi X12 X17 0") 
  tranmain_master__init.writeAction(f"movir X20 0") 
  tranmain_master__init.writeAction(f"movir X21 0") 
  tranmain_master__init.writeAction(f"addi X7 X24 0") 
  tranmain_master__init.writeAction(f"addi X15 X23 0") 
  tranmain_master__init.writeAction(f"sli X23 X27 1") 
  tranmain_master__init.writeAction(f"addi X27 X27 43") 
  tranmain_master__init.writeAction(f"sri X2 X29 24") 
  tranmain_master__init.writeAction(f"andi X29 X29 255") 
  tranmain_master__init.writeAction(f"movwrl X29 X24(X27,0,0)") 
  tranmain_master__init.writeAction(f"addi X27 X28 1") 
  tranmain_master__init.writeAction(f"movwrl X1 X24(X28,0,0)") 
  tranmain_master__init.writeAction(f"bneiu X15 0 __if_init_14_post") 
  tranmain_master__init.writeAction(f"__if_init_12_true: addi X24 X24 280") 
  tranmain_master__init.writeAction(f"bcpyoli X8 X24 8") 
  tranmain_master__init.writeAction(f"__if_init_14_post: yield") 
  
  # Writing code for event main_master::init_done
  tranmain_master__init_done = efa.writeEvent('main_master::init_done')
  tranmain_master__init_done.writeAction(f"entry: addi X16 X16 1") 
  tranmain_master__init_done.writeAction(f"bneu X16 X19 __if_init_done_2_post") 
  tranmain_master__init_done.writeAction(f"__if_init_done_0_true: movir X16 0") 
  tranmain_master__init_done.writeAction(f"bneiu X23 0 __if_init_done_4_false") 
  tranmain_master__init_done.writeAction(f"__if_init_done_3_true: evi X2 X24 main_master::start 1") 
  tranmain_master__init_done.writeAction(f"sendr_wret X24 main_master::map_launcher_done X23 X23 X25") 
  ## print("[DEBUG][NWID %lu] <init_done_main> finsh", NETID);
  tranmain_master__init_done.writeAction(f"jmp __if_init_done_2_post") 
  tranmain_master__init_done.writeAction(f"__if_init_done_4_false: addi X7 X24 0") 
  tranmain_master__init_done.writeAction(f"sli X23 X25 1") 
  tranmain_master__init_done.writeAction(f"addi X25 X25 43") 
  tranmain_master__init_done.writeAction(f"addi X25 X27 1") 
  tranmain_master__init_done.writeAction(f"movwlr X24(X27,0,0) X26") 
  tranmain_master__init_done.writeAction(f"movir X27 -1") 
  tranmain_master__init_done.writeAction(f"sri X27 X27 1") 
  tranmain_master__init_done.writeAction(f"sendr_wcont X26 X27 X0 X0") 
  tranmain_master__init_done.writeAction(f"__if_init_done_2_post: yield") 
  
  # Writing code for event main_master::send_to_global_master_thread
  tranmain_master__send_to_global_master_thread = efa.writeEvent('main_master::send_to_global_master_thread')
  tranmain_master__send_to_global_master_thread.writeAction(f"entry: addi X7 X24 0") 
  tranmain_master__send_to_global_master_thread.writeAction(f"sli X10 X25 1") 
  tranmain_master__send_to_global_master_thread.writeAction(f"addi X25 X25 43") 
  tranmain_master__send_to_global_master_thread.writeAction(f"movwlr X24(X25,0,0) X27") 
  tranmain_master__send_to_global_master_thread.writeAction(f"addi X27 X26 0")  # This is for casting. May be used later on
  tranmain_master__send_to_global_master_thread.writeAction(f"addi X25 X27 1") 
  tranmain_master__send_to_global_master_thread.writeAction(f"movwrl X1 X24(X27,0,0)") 
  tranmain_master__send_to_global_master_thread.writeAction(f"ev X8 X27 X26 X26 4") 
  tranmain_master__send_to_global_master_thread.writeAction(f"sendr_wcont X27 X1 X9 X9") 
  tranmain_master__send_to_global_master_thread.writeAction(f"yield_terminate") 
  
  # Writing code for event main_master::start
  tranmain_master__start = efa.writeEvent('main_master::start')
  tranmain_master__start.writeAction(f"entry: movir X20 0") 
  tranmain_master__start.writeAction(f"bneiu X22 1 __if_start_1_false") 
  tranmain_master__start.writeAction(f"__if_start_0_true: evi X2 X24 map_master__start 1") 
  tranmain_master__start.writeAction(f"movir X16 0") 
  tranmain_master__start.writeAction(f"addi X0 X25 0") 
  tranmain_master__start.writeAction(f"addi X19 X27 0")  # This is for casting. May be used later on
  tranmain_master__start.writeAction(f"add X25 X27 X26") 
  tranmain_master__start.writeAction(f"__while_start_3_condition: ble X26 X25 __while_start_5_post") 
  tranmain_master__start.writeAction(f"__while_start_4_body: ev X24 X27 X25 X25 8") 
  tranmain_master__start.writeAction(f"movir X28 0") 
  tranmain_master__start.writeAction(f"evlb X28 map_master__send_to_map_master_thread") 
  tranmain_master__start.writeAction(f"evi X28 X28 255 4") 
  tranmain_master__start.writeAction(f"ev X28 X28 X25 X25 8") 
  tranmain_master__start.writeAction(f"sendr_wret X28 main_master::map_launcher_done X27 X8 X29") 
  tranmain_master__start.writeAction(f"addi X25 X25 1") 
  tranmain_master__start.writeAction(f"jmp __while_start_3_condition") 
  tranmain_master__start.writeAction(f"__while_start_5_post: jmp __if_start_2_post") 
  tranmain_master__start.writeAction(f"__if_start_1_false: evi X2 X24 main_master::start 1") 
  tranmain_master__start.writeAction(f"addi X0 X25 0") 
  tranmain_master__start.writeAction(f"mul X19 X22 X27") 
  tranmain_master__start.writeAction(f"addi X27 X28 0")  # This is for casting. May be used later on
  tranmain_master__start.writeAction(f"add X25 X28 X26") 
  tranmain_master__start.writeAction(f"__while_start_6_condition: ble X26 X25 __if_start_2_post") 
  tranmain_master__start.writeAction(f"__while_start_7_body: ev X24 X27 X25 X25 8") 
  tranmain_master__start.writeAction(f"movir X28 0") 
  tranmain_master__start.writeAction(f"evlb X28 main_master::send_to_global_master_thread") 
  tranmain_master__start.writeAction(f"evi X28 X28 255 4") 
  tranmain_master__start.writeAction(f"ev X28 X28 X25 X25 8") 
  tranmain_master__start.writeAction(f"addi X23 X29 1") 
  tranmain_master__start.writeAction(f"sendr3_wret X28 main_master::map_launcher_done X27 X17 X29 X30") 
  tranmain_master__start.writeAction(f"addi X22 X30 0")  # This is for casting. May be used later on
  tranmain_master__start.writeAction(f"add X25 X30 X25") 
  tranmain_master__start.writeAction(f"jmp __while_start_6_condition") 
  tranmain_master__start.writeAction(f"__if_start_2_post: yield") 
  
  # Writing code for event main_master::map_launcher_done
  tranmain_master__map_launcher_done = efa.writeEvent('main_master::map_launcher_done')
  tranmain_master__map_launcher_done.writeAction(f"entry: addi X16 X16 1") 
  tranmain_master__map_launcher_done.writeAction(f"add X20 X8 X20") 
  tranmain_master__map_launcher_done.writeAction(f"bneu X16 X19 __if_map_launcher_done_2_post") 
  tranmain_master__map_launcher_done.writeAction(f"__if_map_launcher_done_0_true: movir X16 0") 
  tranmain_master__map_launcher_done.writeAction(f"bneiu X23 0 __if_map_launcher_done_4_false") 
  tranmain_master__map_launcher_done.writeAction(f"__if_map_launcher_done_3_true: evi X2 X24 main_master::map_all_launched 1") 
  tranmain_master__map_launcher_done.writeAction(f"sendr_wret X24 main_master::map_split_launcher_done X23 X23 X26") 
  tranmain_master__map_launcher_done.writeAction(f"sri X20 X25 1") 
  tranmain_master__map_launcher_done.writeAction(f"print '[DEBUG][NWID %lu] <map_launcher_done> update_v:%lu' X0 X25") 
  ## lmbuff[UPDATE_V] = return_value;
  tranmain_master__map_launcher_done.writeAction(f"jmp __if_map_launcher_done_2_post") 
  tranmain_master__map_launcher_done.writeAction(f"__if_map_launcher_done_4_false: addi X7 X24 0") 
  tranmain_master__map_launcher_done.writeAction(f"sli X23 X25 1") 
  tranmain_master__map_launcher_done.writeAction(f"addi X25 X25 43") 
  tranmain_master__map_launcher_done.writeAction(f"addi X25 X27 1") 
  tranmain_master__map_launcher_done.writeAction(f"movwlr X24(X27,0,0) X26") 
  tranmain_master__map_launcher_done.writeAction(f"movir X27 -1") 
  tranmain_master__map_launcher_done.writeAction(f"sri X27 X27 1") 
  tranmain_master__map_launcher_done.writeAction(f"sendr_wcont X26 X27 X20 X20") 
  tranmain_master__map_launcher_done.writeAction(f"__if_map_launcher_done_2_post: yield") 
  
  # Writing code for event main_master::map_all_launched
  tranmain_master__map_all_launched = efa.writeEvent('main_master::map_all_launched')
  tranmain_master__map_all_launched.writeAction(f"entry: movir X20 0") 
  tranmain_master__map_all_launched.writeAction(f"bneiu X22 1 __if_map_all_launched_1_false") 
  tranmain_master__map_all_launched.writeAction(f"__if_map_all_launched_0_true: evi X2 X24 map_master__map_all_launched 1") 
  tranmain_master__map_all_launched.writeAction(f"addi X0 X25 0") 
  tranmain_master__map_all_launched.writeAction(f"addi X19 X27 0")  # This is for casting. May be used later on
  tranmain_master__map_all_launched.writeAction(f"add X25 X27 X26") 
  tranmain_master__map_all_launched.writeAction(f"__while_map_all_launched_3_condition: ble X26 X25 __while_map_all_launched_5_post") 
  tranmain_master__map_all_launched.writeAction(f"__while_map_all_launched_4_body: ev X24 X27 X25 X25 8") 
  tranmain_master__map_all_launched.writeAction(f"movir X28 0") 
  tranmain_master__map_all_launched.writeAction(f"evlb X28 map_master__send_to_map_master_thread") 
  tranmain_master__map_all_launched.writeAction(f"evi X28 X28 255 4") 
  tranmain_master__map_all_launched.writeAction(f"ev X28 X28 X25 X25 8") 
  tranmain_master__map_all_launched.writeAction(f"sendr_wret X28 main_master::map_split_launcher_done X27 X17 X29") 
  tranmain_master__map_all_launched.writeAction(f"addi X25 X25 1") 
  tranmain_master__map_all_launched.writeAction(f"jmp __while_map_all_launched_3_condition") 
  tranmain_master__map_all_launched.writeAction(f"__while_map_all_launched_5_post: jmp __if_map_all_launched_2_post") 
  tranmain_master__map_all_launched.writeAction(f"__if_map_all_launched_1_false: evi X2 X24 main_master::map_all_launched 1") 
  tranmain_master__map_all_launched.writeAction(f"addi X0 X25 0") 
  tranmain_master__map_all_launched.writeAction(f"mul X19 X22 X27") 
  tranmain_master__map_all_launched.writeAction(f"addi X27 X28 0")  # This is for casting. May be used later on
  tranmain_master__map_all_launched.writeAction(f"add X25 X28 X26") 
  tranmain_master__map_all_launched.writeAction(f"__while_map_all_launched_6_condition: ble X26 X25 __if_map_all_launched_2_post") 
  tranmain_master__map_all_launched.writeAction(f"__while_map_all_launched_7_body: ev X24 X27 X25 X25 8") 
  tranmain_master__map_all_launched.writeAction(f"movir X28 0") 
  tranmain_master__map_all_launched.writeAction(f"evlb X28 main_master::send_to_global_master_thread") 
  tranmain_master__map_all_launched.writeAction(f"evi X28 X28 255 4") 
  tranmain_master__map_all_launched.writeAction(f"ev X28 X28 X25 X25 8") 
  tranmain_master__map_all_launched.writeAction(f"addi X23 X29 1") 
  tranmain_master__map_all_launched.writeAction(f"sendr3_wret X28 main_master::map_split_launcher_done X27 X17 X29 X30") 
  tranmain_master__map_all_launched.writeAction(f"addi X22 X30 0")  # This is for casting. May be used later on
  tranmain_master__map_all_launched.writeAction(f"add X25 X30 X25") 
  tranmain_master__map_all_launched.writeAction(f"jmp __while_map_all_launched_6_condition") 
  tranmain_master__map_all_launched.writeAction(f"__if_map_all_launched_2_post: yield") 
  
  # Writing code for event main_master::map_split_launcher_done
  tranmain_master__map_split_launcher_done = efa.writeEvent('main_master::map_split_launcher_done')
  tranmain_master__map_split_launcher_done.writeAction(f"entry: addi X16 X16 1") 
  tranmain_master__map_split_launcher_done.writeAction(f"add X20 X8 X20") 
  tranmain_master__map_split_launcher_done.writeAction(f"bneu X16 X19 __if_map_split_launcher_done_2_post") 
  tranmain_master__map_split_launcher_done.writeAction(f"__if_map_split_launcher_done_0_true: movir X16 0") 
  tranmain_master__map_split_launcher_done.writeAction(f"bneiu X23 0 __if_map_split_launcher_done_4_false") 
  tranmain_master__map_split_launcher_done.writeAction(f"__if_map_split_launcher_done_3_true: evi X2 X24 main_master::map_split_all_launched 1") 
  tranmain_master__map_split_launcher_done.writeAction(f"sendr_wret X24 main_master::reduce_launcher_done X23 X23 X26") 
  tranmain_master__map_split_launcher_done.writeAction(f"sri X20 X25 1") 
  tranmain_master__map_split_launcher_done.writeAction(f"print '[DEBUG][NWID %lu] <map_split_launcher_done> update_split_v:%lu' X0 X25") 
  tranmain_master__map_split_launcher_done.writeAction(f"jmp __if_map_split_launcher_done_2_post") 
  tranmain_master__map_split_launcher_done.writeAction(f"__if_map_split_launcher_done_4_false: addi X7 X24 0") 
  tranmain_master__map_split_launcher_done.writeAction(f"sli X23 X25 1") 
  tranmain_master__map_split_launcher_done.writeAction(f"addi X25 X25 43") 
  tranmain_master__map_split_launcher_done.writeAction(f"addi X25 X27 1") 
  tranmain_master__map_split_launcher_done.writeAction(f"movwlr X24(X27,0,0) X26") 
  tranmain_master__map_split_launcher_done.writeAction(f"movir X27 -1") 
  tranmain_master__map_split_launcher_done.writeAction(f"sri X27 X27 1") 
  tranmain_master__map_split_launcher_done.writeAction(f"sendr_wcont X26 X27 X20 X20") 
  tranmain_master__map_split_launcher_done.writeAction(f"__if_map_split_launcher_done_2_post: yield") 
  
  # Writing code for event main_master::map_split_all_launched
  tranmain_master__map_split_all_launched = efa.writeEvent('main_master::map_split_all_launched')
  tranmain_master__map_split_all_launched.writeAction(f"entry: movir X20 0") 
  tranmain_master__map_split_all_launched.writeAction(f"bneiu X22 1 __if_map_split_all_launched_1_false") 
  tranmain_master__map_split_all_launched.writeAction(f"__if_map_split_all_launched_0_true: evi X2 X24 map_master__map_split_all_launched 1") 
  tranmain_master__map_split_all_launched.writeAction(f"addi X0 X25 0") 
  tranmain_master__map_split_all_launched.writeAction(f"addi X19 X27 0")  # This is for casting. May be used later on
  tranmain_master__map_split_all_launched.writeAction(f"add X25 X27 X26") 
  tranmain_master__map_split_all_launched.writeAction(f"__while_map_split_all_launched_3_condition: ble X26 X25 __while_map_split_all_launched_5_post") 
  tranmain_master__map_split_all_launched.writeAction(f"__while_map_split_all_launched_4_body: ev X24 X27 X25 X25 8") 
  tranmain_master__map_split_all_launched.writeAction(f"movir X28 0") 
  tranmain_master__map_split_all_launched.writeAction(f"evlb X28 map_master__send_to_map_master_thread") 
  tranmain_master__map_split_all_launched.writeAction(f"evi X28 X28 255 4") 
  tranmain_master__map_split_all_launched.writeAction(f"ev X28 X28 X25 X25 8") 
  tranmain_master__map_split_all_launched.writeAction(f"sendr_wret X28 main_master::reduce_launcher_done X27 X25 X29") 
  tranmain_master__map_split_all_launched.writeAction(f"addi X25 X25 1") 
  tranmain_master__map_split_all_launched.writeAction(f"jmp __while_map_split_all_launched_3_condition") 
  tranmain_master__map_split_all_launched.writeAction(f"__while_map_split_all_launched_5_post: jmp __if_map_split_all_launched_2_post") 
  tranmain_master__map_split_all_launched.writeAction(f"__if_map_split_all_launched_1_false: evi X2 X24 main_master::map_split_all_launched 1") 
  tranmain_master__map_split_all_launched.writeAction(f"addi X0 X25 0") 
  tranmain_master__map_split_all_launched.writeAction(f"mul X19 X22 X27") 
  tranmain_master__map_split_all_launched.writeAction(f"addi X27 X28 0")  # This is for casting. May be used later on
  tranmain_master__map_split_all_launched.writeAction(f"add X25 X28 X26") 
  tranmain_master__map_split_all_launched.writeAction(f"__while_map_split_all_launched_6_condition: ble X26 X25 __if_map_split_all_launched_2_post") 
  tranmain_master__map_split_all_launched.writeAction(f"__while_map_split_all_launched_7_body: ev X24 X27 X25 X25 8") 
  tranmain_master__map_split_all_launched.writeAction(f"movir X28 0") 
  tranmain_master__map_split_all_launched.writeAction(f"evlb X28 main_master::send_to_global_master_thread") 
  tranmain_master__map_split_all_launched.writeAction(f"evi X28 X28 255 4") 
  tranmain_master__map_split_all_launched.writeAction(f"ev X28 X28 X25 X25 8") 
  tranmain_master__map_split_all_launched.writeAction(f"addi X23 X29 1") 
  tranmain_master__map_split_all_launched.writeAction(f"sendr3_wret X28 main_master::reduce_launcher_done X27 X17 X29 X30") 
  tranmain_master__map_split_all_launched.writeAction(f"addi X22 X30 0")  # This is for casting. May be used later on
  tranmain_master__map_split_all_launched.writeAction(f"add X25 X30 X25") 
  tranmain_master__map_split_all_launched.writeAction(f"jmp __while_map_split_all_launched_6_condition") 
  tranmain_master__map_split_all_launched.writeAction(f"__if_map_split_all_launched_2_post: yield") 
  
  # Writing code for event main_master::reduce_launcher_done
  tranmain_master__reduce_launcher_done = efa.writeEvent('main_master::reduce_launcher_done')
  tranmain_master__reduce_launcher_done.writeAction(f"entry: addi X16 X16 1") 
  tranmain_master__reduce_launcher_done.writeAction(f"add X8 X20 X20") 
  tranmain_master__reduce_launcher_done.writeAction(f"add X9 X21 X21") 
  tranmain_master__reduce_launcher_done.writeAction(f"addi X7 X24 0") 
  tranmain_master__reduce_launcher_done.writeAction(f"bneu X16 X19 __if_reduce_launcher_done_2_post") 
  tranmain_master__reduce_launcher_done.writeAction(f"__if_reduce_launcher_done_0_true: movir X16 0") 
  tranmain_master__reduce_launcher_done.writeAction(f"bneiu X23 0 __if_reduce_launcher_done_4_false") 
  tranmain_master__reduce_launcher_done.writeAction(f"__if_reduce_launcher_done_3_true: sri X20 X25 1") 
  tranmain_master__reduce_launcher_done.writeAction(f"print '[Itera %lu]: add queue %lu traversed edges %lu' X17 X25 X21") 
  tranmain_master__reduce_launcher_done.writeAction(f"bneiu X20 0 __if_reduce_launcher_done_7_false") 
  tranmain_master__reduce_launcher_done.writeAction(f"__if_reduce_launcher_done_6_true: print 'BFS finish'") 
  tranmain_master__reduce_launcher_done.writeAction(f"movir X27 1") 
  tranmain_master__reduce_launcher_done.writeAction(f"movrl X27 0(X24) 0 8") 
  tranmain_master__reduce_launcher_done.writeAction(f"yield_terminate") 
  tranmain_master__reduce_launcher_done.writeAction(f"jmp __if_reduce_launcher_done_8_post") 
  tranmain_master__reduce_launcher_done.writeAction(f"__if_reduce_launcher_done_7_false: addi X17 X17 1") 
  tranmain_master__reduce_launcher_done.writeAction(f"movrl X17 312(X24) 0 8") 
  ## lmbuff[CONTROL_LEVEL] = 0;
  tranmain_master__reduce_launcher_done.writeAction(f"addi X7 X26 280") 
  ## unsigned long* local lmbuff_tmp = LMBASE + (SENDBUFFER * 8);
  ## lmbuff_tmp[0] = lmbuff[NUM_LANES_TOTAL];
  ## lmbuff_tmp[1] = lmbuff[GV];
  ## lmbuff_tmp[2] = lmbuff[MAIN_QUEUE_START];
  ## lmbuff_tmp[3] = lmbuff[QUEUE_LENGTH];
  ## lmbuff_tmp[4] = lmbuff[ITERATION];
  ## lmbuff_tmp[5] = lmbuff[NUM_LANES_TOTAL];
  ## lmbuff_tmp[6] = lmbuff[LOG2_NUM_CONTROL_LANE];
  ## lmbuff_tmp[7] = 0;
  tranmain_master__reduce_launcher_done.writeAction(f"evi X2 X27 main_master::init 1") 
  tranmain_master__reduce_launcher_done.writeAction(f"send_wret X27 main_master::init_done X26 8 X28") 
  tranmain_master__reduce_launcher_done.writeAction(f"yield") 
  tranmain_master__reduce_launcher_done.writeAction(f"__if_reduce_launcher_done_8_post: jmp __if_reduce_launcher_done_2_post") 
  tranmain_master__reduce_launcher_done.writeAction(f"__if_reduce_launcher_done_4_false: sli X23 X25 1") 
  tranmain_master__reduce_launcher_done.writeAction(f"addi X25 X25 43") 
  tranmain_master__reduce_launcher_done.writeAction(f"addi X25 X27 1") 
  tranmain_master__reduce_launcher_done.writeAction(f"movwlr X24(X27,0,0) X26") 
  tranmain_master__reduce_launcher_done.writeAction(f"movir X27 -1") 
  tranmain_master__reduce_launcher_done.writeAction(f"sri X27 X27 1") 
  tranmain_master__reduce_launcher_done.writeAction(f"sendr_wcont X26 X27 X20 X21") 
  tranmain_master__reduce_launcher_done.writeAction(f"yield_terminate") 
  tranmain_master__reduce_launcher_done.writeAction(f"__if_reduce_launcher_done_2_post: yield") 
  
